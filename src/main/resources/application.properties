spring.application.name=todo-app
server.port=8080
server.servlet.session.cookie.http-only=false
server.servlet.session.cookie.secure=false

spring.data.mongodb.host=${MONGO_HOST}
spring.data.mongodb.port=${MONGO_PORT}
spring.data.mongodb.database=${MONGO_DATABASE}
spring.data.mongodb.username=${MONGO_USERNAME}
spring.data.mongodb.password=${MONGO_PASSWORD}
spring.data.mongodb.authentication-database=${MONGO_AUTH_DB}
spring.data.mongodb.gridfs.database=${MONGO_GRID_FS_DB}

spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=100MB

spring.datasource.url=${POSTGRES_URL}
spring.datasource.username=${POSTGRES_USERNAME}
spring.datasource.password=${POSTGRES_PASSWORD}

spring.jpa.database=postgresql
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql=true

spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration

logging.level.org.atmosphere = warn
spring.mustache.check-template-location = false


vaadin.allowed-packages=com.vaadin,com.example.application

# OAuth2 Client
spring.security.oauth2.client.registration.keycloak.client-id=${CLIENT_ID}
spring.security.oauth2.client.registration.keycloak.client-secret=${CLIENT_SECRET}
spring.security.oauth2.client.registration.keycloak.scope=openid,profile,email
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

# Keycloak Provider
spring.security.oauth2.client.provider.keycloak.issuer-uri=${KEYCLOAK_ISSUER_URI}
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username

# kafka
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.topic.name=notes-topic